<?xml version="1.0" encoding="UTF-8"?>
<java-project id="default" name="xmltoxsd_2" revision="default">
	<pkg name="/src/main/java/:org.splabs.vocabulary.vxl">
		<class name="/src/main/java/:org.splabs.vocabulary.vxl.VocabularyExtractor" intfc="n" abs="n" inn="n" sloc="55" jdoc="A main class for term extraction in Java Projects @author gustavojss Tercio de Melo">
			<field name="projectName" access="priv" jdoc=""/>
			<field name="projectRevision" access="priv" jdoc=""/>
			<field name="locParameters" access="pub" jdoc=""/>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.VocabularyExtractor.VocabularyExtractor(String, String)" access="pub" jdoc="Creates a new extractor with the given name and revision of a project @param projectName the name of the project @param projectRevision the revision note of the project">
				<param name="projectName"/>
				<param name="projectRevision"/>
				<lvar name="projectName" count="1"/>
				<lvar name="projectRevision" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.VocabularyExtractor.extractTermsFromJavaFolder(String, String, String, List:LOCParameters)" access="pub" jdoc="Extracts terms from a Java Project Folder @param projectPath the path for the project folder @param resultVXLFileName the result file where the vocabulary will be saved">
				<param name="projectPath"/>
				<param name="resultVXLFileName"/>
				<param name="resultLOCFileName"/>
				<param name="locParameters"/>
				<lvar name="FileUtil" count="2"/>
				<lvar name="extractor" count="3"/>
				<lvar name="locParameters" count="2"/>
				<lvar name="projectPath" count="1"/>
				<lvar name="resultLOCFileName" count="1"/>
				<lvar name="resultVXLFileName" count="1"/>
				<mthinv name="getLOCContent" count="1"/>
				<mthinv name="getVocabulary" count="1"/>
				<mthinv name="saveLOCFile" count="1"/>
				<mthinv name="saveVXLFile" count="1"/>
				<mthinv name="size" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.VocabularyExtractor.isInArgs(String[], String)" access="priv" jdoc="Verifies if a given String is contained in a given array of Strings @param args @param parameter @return">
				<param name="args"/>
				<param name="parameter"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.VocabularyExtractor.loadLOCParameters(String[])" access="priv" jdoc="Sets the LOC extraction configurations based on the information passed through the JVM arguments @param args @return">
				<param name="args"/>
				<lvar name="args" count="7"/>
				<lvar name="loc" count="5"/>
				<lvar name="locParameters" count="5"/>
				<mthinv name="add" count="5"/>
				<mthinv name="isInArgs" count="7"/>
				<lit cntt="&amp;quot;-annot&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;-headers&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;-inner&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;-loc&amp;quot;" count="2"/>
				<lit cntt="&amp;quot;-physical&amp;quot;" count="2"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.VocabularyExtractor.main(String[])" access="pub" jdoc="Simple execution for term extraction on a Java Project Folder @param args USAGE: [project path] [project name] [project revision] [result .vxl file name]">
				<param name="args"/>
				<lvar name="ERROR_MESSAGE" count="2"/>
				<lvar name="LINESEPARATOR" count="2"/>
				<lvar name="System" count="1"/>
				<lvar name="args" count="6"/>
				<lvar name="i" count="5"/>
				<lvar name="locParameters" count="4"/>
				<lvar name="projectName" count="2"/>
				<lvar name="projectPath" count="2"/>
				<lvar name="projectRevision" count="2"/>
				<lvar name="resultLOCFileName" count="2"/>
				<lvar name="resultVXLFileName" count="2"/>
				<lvar name="vocExtractor" count="2"/>
				<mthinv name="extractTermsFromJavaFolder" count="1"/>
				<mthinv name="getProperty" count="1"/>
				<mthinv name="loadLOCParameters" count="1"/>
				<mthinv name="println" count="1"/>
				<mthinv name="size" count="2"/>
				<lit cntt="&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;TO SET EXTRA OPTIONS:&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;USAGE: [project path] [project name] [project revision] [result .vxl file name]&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;Vocabulary Extraction has finished.&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;[-annot] includes framework annotations counting in the ENTITY VELOCCount result file&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;[-headers] includes the headers counting in the ENTITY VELOCCount result file&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;[-inner] includes inner entities LOC counting in the ENTITY VELOCCount result file&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;[-loc] turn on the VELOCCounter, you must use the following arguments &amp;quot;" count="1"/>
				<lit cntt="&amp;quot;[-physical] Counts only physical lines, not more&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;line.separator&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;to set the parameters for the counting:&amp;quot;" count="1"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/src/main/java/:org.splabs.vocabulary.vxl.extractor">
		<class name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ASTVocabularyExtractor" intfc="n" abs="n" inn="n" sloc="43" jdoc="A term extractor for Eclipse&amp;apos;s Java Project Specification @author gustavojss">
			<field name="javaProject" access="priv" jdoc=""/>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ASTVocabularyExtractor.ASTVocabularyExtractor(IJavaProject, String, String, List:LOCParameters)" access="pub" jdoc="Creates a new term extractor for Eclipse&amp;apos;s Java Project Specification @param javaProject the Eclipse&amp;apos;s project @param javaProjectName the project&amp;apos;s name @param javaProjectRevision the project&amp;apos;s revision name">
				<param name="javaProject"/>
				<param name="javaProjectName"/>
				<param name="javaProjectRevision"/>
				<param name="locParameters"/>
				<lvar name="javaProject" count="1"/>
				<mthinv name="extractTermsFromProject" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ASTVocabularyExtractor.extractTermsFromProject()" access="prot" jdoc="">
				<comm cntt="for all folders"/>
				<lvar name="e" count="6"/>
				<mthinv name="endProject" count="1"/>
				<mthinv name="printStackTrace" count="3"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ASTVocabularyExtractor.extractTermsFromProjectFolder(IPackageFragmentRoot)" access="pub" jdoc="Extracts terms from the project folder @param packageFragmentRoot the folder specification @throws JavaModelException @throws InvocationTargetException @throws InterruptedException">
				<param name="packageFragmentRoot"/>
				<lvar name="packageFragmentRoot" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ASTVocabularyExtractor.extractTermsFromPackage(IPackageFragment)" access="pub" jdoc="Extracts terms from the java package @param pckg the package specification @throws JavaModelException @throws InvocationTargetException @throws InterruptedException">
				<param name="pckg"/>
				<lvar name="pckg" count="1"/>
				<mthinv name="endPackage" count="1"/>
				<mthinv name="getElementName" count="1"/>
				<mthinv name="startPackage" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ASTVocabularyExtractor.extractTermsFromCompilationUnit(ICompilationUnit)" access="pub" jdoc="Extracts terms from a .java file @param compilationUnit @throws JavaModelException @throws InvocationTargetException @throws InterruptedException">
				<comm cntt="extract AST tree from source code"/>
				<comm cntt="extractTermsFromCompilationUnit(astCompilationUnit);"/>
				<param name="compilationUnit"/>
				<lvar name="astCompilationUnit" count="1"/>
				<lvar name="compilationUnit" count="1"/>
				<lvar name="sourceCode" count="2"/>
				<lvar name="tree" count="2"/>
				<mthinv name="getASTTreeFromSourceCode" count="1"/>
				<mthinv name="getSource" count="1"/>
				<mthinv name="toCharArray" count="1"/>
			</mth>
		</class>
		<class name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.CommentUnit" intfc="n" abs="n" inn="n" sloc="58" jdoc="Stores useful information of a Comment such as it&amp;apos;s contents, start and end position in a given source code @author Tercio de Melo">
			<field name="content" access="priv" jdoc=""/>
			<field name="commentNode" access="priv" jdoc=""/>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.CommentUnit.CommentUnit(Comment, String)" access="pub" jdoc="Uses an ASTNode subclass Comment object and a sourceCode to extract useful information @param commentNode Comment which stores start position and length of a comment the source code @param sourceCode String which stores the source code to be parsed">
				<param name="commentNode"/>
				<param name="sourceCode"/>
				<lvar name="commentNode" count="1"/>
				<lvar name="sourceCode" count="1"/>
				<mthinv name="extractValue" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.CommentUnit.extractValue(String)" access="priv" jdoc="">
				<param name="sourceCode"/>
				<lvar name="begin" count="3"/>
				<lvar name="commentNode" count="2"/>
				<lvar name="content" count="1"/>
				<lvar name="end" count="2"/>
				<lvar name="sourceCode" count="1"/>
				<mthinv name="getLength" count="1"/>
				<mthinv name="getStartPosition" count="1"/>
				<mthinv name="processComment" count="1"/>
				<mthinv name="substring" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.CommentUnit.getStartPosition()" access="pub" jdoc="Returns the start point in the source code @return">
				<lvar name="commentNode" count="1"/>
				<mthinv name="getStartPosition" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.CommentUnit.getEndPosition()" access="pub" jdoc="Returns the end point in the source code @return">
				<lvar name="commentNode" count="2"/>
				<mthinv name="getLength" count="1"/>
				<mthinv name="getStartPosition" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.CommentUnit.getComment()" access="pub" jdoc="Returns the extracted content of the comment @return">
				<lvar name="content" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.CommentUnit.processComment(String)" access="pub" jdoc="Processes the comment, removing undesirable characters and returning the extracted content @param comment the comment with undesirable characters @return">
				<param name="comment"/>
				<lvar name="comment" count="28"/>
				<mthinv name="contains" count="7"/>
				<mthinv name="removeInvalidCharacters" count="1"/>
				<mthinv name="replace" count="7"/>
				<mthinv name="replaceAll" count="1"/>
				<mthinv name="trim" count="1"/>
				<lit cntt="&amp;apos; &amp;apos;" count="5"/>
				<lit cntt="&amp;apos;&amp;&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;&amp;gt;&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;&amp;lt;&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;[&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\&amp;apos;&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\&amp;quot;&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\n&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;]&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;^&amp;apos;" count="1"/>
				<lit cntt="&amp;quot; &amp;quot;" count="3"/>
				<lit cntt="&amp;quot;&amp;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;&amp;gt;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;&amp;lt;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\\s+&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\n&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.CommentUnit.removeInvalidCharacters(String)" access="pub" jdoc="Removes invalid characters for UTF-8 encoding @param text @return">
				<comm cntt="Used to hold the output."/>
				<comm cntt="Used to reference the current character."/>
				<comm cntt="vacancy test."/>
				<comm cntt="NOTE: No IndexOutOfBoundsException caught here; it should not happen."/>
				<param name="text"/>
				<lvar name="current" count="12"/>
				<lvar name="i" count="4"/>
				<lvar name="out" count="3"/>
				<lvar name="text" count="4"/>
				<mthinv name="append" count="1"/>
				<mthinv name="charAt" count="1"/>
				<mthinv name="equals" count="1"/>
				<mthinv name="length" count="1"/>
				<mthinv name="toString" count="1"/>
				<lit cntt="&amp;quot;&amp;quot;" count="2"/>
			</mth>
		</class>
		<class name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.JavaFolderVocabularyExtractor" intfc="n" abs="n" inn="n" sloc="83" jdoc="A term extractor for Java Project Folders @author gustavojss">
			<field name="projectPath" access="priv" jdoc=""/>
			<const name="DEFAULT_PACKAGE" access="priv" jdoc=""/>
			<field name="packageHierarchy" access="priv" jdoc=""/>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.JavaFolderVocabularyExtractor.JavaFolderVocabularyExtractor(String, String, String, List:LOCParameters)" access="pub" jdoc="Creates a new term extractor for Java Project Folders @param projectPath the path of the project folder @param projectName the project&amp;apos;s name @param projectRevision the project&amp;apos;s revision name">
				<param name="projectPath"/>
				<param name="projectName"/>
				<param name="projectRevision"/>
				<param name="locParameters"/>
				<lvar name="projectPath" count="1"/>
				<mthinv name="extractTermsFromProject" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.JavaFolderVocabularyExtractor.extractTermsFromProject()" access="prot" jdoc="">
				<comm cntt="for all files in this project folder, add java components to the map"/>
				<comm cntt="extract terms from the package hierarchy map"/>
				<lvar name="projectFolder" count="2"/>
				<mthinv name="endProject" count="1"/>
				<mthinv name="extractTermsFromHierarchyMap" count="1"/>
				<mthinv name="isDirectory" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.JavaFolderVocabularyExtractor.extractAllFiles(File)" access="priv" jdoc="Extract all java files from a folder, and add to the hierarchy map @param file">
				<comm cntt="if it&amp;apos;s a folder, search all containing files and subfolders"/>
				<comm cntt="if it&amp;apos;s a java file, extract AST tree and add to the hierarchy map"/>
				<param name="file"/>
				<lvar name="file" count="5"/>
				<mthinv name="extractTermsFromClass" count="1"/>
				<mthinv name="getAbsolutePath" count="2"/>
				<mthinv name="isDirectory" count="1"/>
				<mthinv name="isFile" count="1"/>
				<mthinv name="isJavaFile" count="1"/>
				<mthinv name="println" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.JavaFolderVocabularyExtractor.extractTermsFromHierarchyMap()" access="priv" jdoc="Extract terms from all compilation units in the hierarchy map">
				<comm cntt="for all packages"/>
				<comm cntt="for all compilation units in this package, extract terms"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.JavaFolderVocabularyExtractor.extractTermsFromClass(File)" access="priv" jdoc="Extracts the java structure of a file, and adds to the hierarchy map @param classFile the .java file">
				<comm cntt="copying source code from .java file"/>
				<comm cntt="extract AST tree from source code"/>
				<comm cntt="extractCommentsFromCompilationUnit(compilationUnit);"/>
				<comm cntt="adding the extracted compilation unit to package map"/>
				<param name="classFile"/>
				<lvar name="classFile" count="1"/>
				<lvar name="compilationUnit" count="2"/>
				<lvar name="e" count="8"/>
				<lvar name="in" count="2"/>
				<lvar name="line" count="3"/>
				<lvar name="sourceCode" count="3"/>
				<lvar name="tree" count="2"/>
				<mthinv name="addCompilationUnitToMap" count="1"/>
				<mthinv name="append" count="1"/>
				<mthinv name="getASTTreeFromSourceCode" count="1"/>
				<mthinv name="getAbsolutePath" count="1"/>
				<mthinv name="printStackTrace" count="4"/>
				<mthinv name="readLine" count="1"/>
				<mthinv name="toCharArray" count="1"/>
				<mthinv name="toString" count="1"/>
				<lit cntt="&amp;quot;\n&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.JavaFolderVocabularyExtractor.addCompilationUnitToMap(CompilationUnit, String)" access="priv" jdoc="Adds the given compilation unit to the hierarchy map @param compilationUnit the compilation unit to be added">
				<comm cntt="extracting package name"/>
				<comm cntt="extracting terms from compilation unit"/>
				<comm cntt="adding the compilation unit in the map"/>
				<param name="compilationUnit"/>
				<param name="fileName"/>
				<lvar name="DEFAULT_PACKAGE" count="1"/>
				<lvar name="compUnitBuffer" count="2"/>
				<lvar name="compilationUnit" count="2"/>
				<lvar name="compilationUnits" count="5"/>
				<lvar name="fileName" count="1"/>
				<lvar name="packageName" count="4"/>
				<lvar name="pckg" count="3"/>
				<mthinv name="add" count="1"/>
				<mthinv name="containsKey" count="1"/>
				<mthinv name="extractTermsFromCompilationUnit" count="1"/>
				<mthinv name="get" count="1"/>
				<mthinv name="getFullyQualifiedName" count="1"/>
				<mthinv name="getName" count="1"/>
				<mthinv name="getPackage" count="1"/>
				<mthinv name="put" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.JavaFolderVocabularyExtractor.isJavaFile(String)" access="priv" jdoc="Verifies if the given file is a java file @param fileName @return">
				<param name="fileName"/>
				<lvar name="fileName" count="1"/>
				<mthinv name="endsWith" count="1"/>
				<lit cntt="&amp;quot;.java&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.JavaFolderVocabularyExtractor.main(String[])" access="pub" jdoc="">
				<param name="args"/>
				<lvar name="FileUtil" count="1"/>
				<lvar name="args" count="1"/>
				<lvar name="projectPath" count="2"/>
				<lvar name="termExtractor" count="1"/>
				<mthinv name="saveVXLFile" count="1"/>
				<lit cntt="&amp;quot;1.0&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;design.vxl&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;projetoTeste&amp;quot;" count="1"/>
			</mth>
		</class>
		<class name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor" intfc="n" abs="y" inn="n" sloc="117" jdoc="An abstract implementation of term extraction of a Java Project @author gustavojss Tercio de Melo">
			<const name="PROJECT_NAME" access="priv" jdoc=""/>
			<const name="PROJECT_PACKAGE" access="priv" jdoc=""/>
			<const name="PROJECT_CLASS" access="priv" jdoc=""/>
			<const name="PROJECT_ENUM" access="priv" jdoc=""/>
			<const name="PROJECT_FIELD" access="priv" jdoc=""/>
			<const name="PROJECT_METHOD" access="priv" jdoc=""/>
			<const name="PROJECT_PARAMETER" access="priv" jdoc=""/>
			<const name="PROJECT_LOCVARIABLE" access="priv" jdoc=""/>
			<field name="packageCount" access="priv" jdoc=""/>
			<field name="classCount" access="priv" jdoc=""/>
			<field name="enumCount" access="priv" jdoc=""/>
			<field name="fieldCount" access="priv" jdoc=""/>
			<field name="methodCount" access="priv" jdoc=""/>
			<field name="parameterCount" access="priv" jdoc=""/>
			<field name="locVariableCount" access="priv" jdoc=""/>
			<const name="locParameters" access="prot" jdoc=""/>
			<field name="vocabulary" access="prot" jdoc="The vocabulary content"/>
			<field name="entitiesLOCContent" access="prot" jdoc=""/>
			<field name="compilationUnitLOCContent" access="prot" jdoc=""/>
			<field name="totalLOC" access="prot" jdoc=""/>
			<field name="totalHeader" access="prot" jdoc=""/>
			<field name="totalAnnotation" access="prot" jdoc=""/>
			<field name="totalInnerEntitiesLines" access="prot" jdoc=""/>
			<field name="totalCodeLines" access="prot" jdoc=""/>
			<field name="compilationUnitLOC" access="prot" jdoc=""/>
			<const name="LINE_SEPARATOR" access="priv" jdoc=""/>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.ProjectVocabularyExtractor(String, String, List:LOCParameters)" access="pub" jdoc="Creates a new vocabulary for the given project @param projectName the project name @param projectRevision the project revision note">
				<param name="projectName"/>
				<param name="projectRevision"/>
				<param name="locParameters"/>
				<lvar name="locParameters" count="1"/>
				<lvar name="projectName" count="1"/>
				<lvar name="projectRevision" count="1"/>
				<mthinv name="startProject" count="1"/>
				<lit cntt="&amp;quot;,Entity&amp;apos;s Name,LOC Count,Header Count,Annotation Count,Inner Entities Lines,Total&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;Name, LOC Count&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.getVocabulary()" access="pub" jdoc="Returns the vocabulary of the project @return the project&amp;apos;s vocabulary">
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.getLOCContent()" access="pub" jdoc="">
				<lvar name="compilationUnitLOCContent" count="1"/>
				<lvar name="entitiesLOCContent" count="1"/>
				<lvar name="locParameters" count="1"/>
				<mthinv name="contains" count="1"/>
				<lit cntt="&amp;quot;,&amp;quot;" count="4"/>
				<lit cntt="&amp;quot;\nTotal,,&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.getCompilationUnitLOCContent()" access="pub" jdoc="">
				<lvar name="compilationUnitLOCContent" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.extractTermsFromProject()" access="prot" jdoc="Performs the term extraction of the specified project">
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.startProject(String, String)" access="prot" jdoc="">
				<param name="projectName"/>
				<param name="projectRevision"/>
				<lvar name="PROJECT_NAME" count="1"/>
				<mthinv name="append" count="1"/>
				<mthinv name="encodeToUTF8" count="1"/>
				<lit cntt="&amp;quot;&amp;lt;java-project id=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; name=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; revision=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot;&amp;gt;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.endProject()" access="prot" jdoc="">
				<mthinv name="append" count="1"/>
				<mthinv name="encodeToUTF8" count="1"/>
				<lit cntt="&amp;quot;&amp;lt; java-project&amp;gt;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.startPackage(String)" access="prot" jdoc="">
				<param name="packageName"/>
				<lvar name="PROJECT_PACKAGE" count="1"/>
				<mthinv name="append" count="1"/>
				<mthinv name="encodeToUTF8" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; namespace=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot;&amp;gt;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\t&amp;lt;package id=\&amp;quot;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.endPackage()" access="prot" jdoc="">
				<lvar name="LINE_SEPARATOR" count="1"/>
				<mthinv name="append" count="1"/>
				<mthinv name="encodeToUTF8" count="1"/>
				<lit cntt="&amp;quot;\t&amp;lt; package&amp;gt;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.startClass(StringBuffer, String, String, String, String, String)" access="prot" jdoc="">
				<param name="buffer"/>
				<param name="className"/>
				<param name="isInterface"/>
				<param name="isAbstract"/>
				<param name="isInner"/>
				<param name="comment"/>
				<lvar name="PROJECT_CLASS" count="1"/>
				<lvar name="buffer" count="1"/>
				<mthinv name="append" count="1"/>
				<mthinv name="encodeToUTF8" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; abstract=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; inner=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; interface=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; javadoc=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; name=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot;&amp;gt;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\t\t&amp;lt;class id=\&amp;quot;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.classComment(StringBuffer, List:String)" access="prot" jdoc="">
				<param name="buffer"/>
				<param name="comments"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.endClass(StringBuffer)" access="prot" jdoc="">
				<param name="buffer"/>
				<lvar name="LINE_SEPARATOR" count="1"/>
				<lvar name="buffer" count="1"/>
				<mthinv name="append" count="1"/>
				<mthinv name="encodeToUTF8" count="1"/>
				<lit cntt="&amp;quot;\t\t&amp;lt; class&amp;gt;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.startEnum(StringBuffer, String, String)" access="prot" jdoc="">
				<param name="buffer"/>
				<param name="enumName"/>
				<param name="enumComment"/>
				<lvar name="PROJECT_ENUM" count="1"/>
				<lvar name="buffer" count="1"/>
				<mthinv name="append" count="1"/>
				<mthinv name="encodeToUTF8" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; javadoc=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; name=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot;&amp;gt;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\t\t&amp;lt;enum id=\&amp;quot;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.enumComment(StringBuffer, List:String)" access="prot" jdoc="">
				<param name="buffer"/>
				<param name="comments"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.endEnum(StringBuffer)" access="prot" jdoc="">
				<param name="buffer"/>
				<lvar name="LINE_SEPARATOR" count="1"/>
				<lvar name="buffer" count="1"/>
				<mthinv name="append" count="1"/>
				<mthinv name="encodeToUTF8" count="1"/>
				<lit cntt="&amp;quot;\t\t&amp;lt; enum&amp;gt;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.constant(StringBuffer, String, String, String)" access="prot" jdoc="">
				<param name="buffer"/>
				<param name="constantName"/>
				<param name="visibility"/>
				<param name="comment"/>
				<lvar name="PROJECT_FIELD" count="1"/>
				<lvar name="buffer" count="1"/>
				<mthinv name="append" count="1"/>
				<mthinv name="encodeToUTF8" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; &amp;gt;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; javadoc=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; name=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; visibility=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\t\t\t&amp;lt;constant id=\&amp;quot;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.field(StringBuffer, String, String, String)" access="prot" jdoc="">
				<param name="buffer"/>
				<param name="fieldName"/>
				<param name="visibility"/>
				<param name="comment"/>
				<lvar name="PROJECT_FIELD" count="1"/>
				<lvar name="buffer" count="1"/>
				<mthinv name="append" count="1"/>
				<mthinv name="encodeToUTF8" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; &amp;gt;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; javadoc=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; name=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; visibility=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\t\t\t&amp;lt;field id=\&amp;quot;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.startMethod(StringBuffer, String, String, String)" access="prot" jdoc="">
				<param name="buffer"/>
				<param name="methodName"/>
				<param name="visibility"/>
				<param name="comment"/>
				<lvar name="PROJECT_METHOD" count="1"/>
				<lvar name="buffer" count="1"/>
				<mthinv name="append" count="1"/>
				<mthinv name="encodeToUTF8" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; javadoc=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; name=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; visibility=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot;&amp;gt;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\t\t\t&amp;lt;method id=\&amp;quot;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.methodComment(StringBuffer, List:String)" access="prot" jdoc="">
				<param name="buffer"/>
				<param name="comments"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.parameter(StringBuffer, String)" access="prot" jdoc="">
				<param name="buffer"/>
				<param name="parameterName"/>
				<lvar name="PROJECT_PARAMETER" count="1"/>
				<lvar name="buffer" count="1"/>
				<mthinv name="append" count="1"/>
				<mthinv name="encodeToUTF8" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; &amp;gt;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; name=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\t\t\t\t&amp;lt;param id=\&amp;quot;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.localVariable(StringBuffer, String)" access="prot" jdoc="">
				<param name="buffer"/>
				<param name="localVariableName"/>
				<lvar name="PROJECT_LOCVARIABLE" count="1"/>
				<lvar name="buffer" count="1"/>
				<mthinv name="append" count="1"/>
				<mthinv name="encodeToUTF8" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; &amp;gt;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\&amp;quot; name=\&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\t\t\t\t&amp;lt;local-var id=\&amp;quot;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.endMethod(StringBuffer)" access="prot" jdoc="">
				<param name="buffer"/>
				<lvar name="LINE_SEPARATOR" count="1"/>
				<lvar name="buffer" count="1"/>
				<mthinv name="append" count="1"/>
				<mthinv name="encodeToUTF8" count="1"/>
				<lit cntt="&amp;quot;\t\t\t&amp;lt; method&amp;gt;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.ProjectVocabularyExtractor.encodeToUTF8(String)" access="priv" jdoc="">
				<param name="aString"/>
				<lvar name="aString" count="1"/>
				<lvar name="bytes" count="2"/>
				<lvar name="e" count="2"/>
				<mthinv name="getBytes" count="1"/>
				<mthinv name="printStackTrace" count="1"/>
				<lit cntt="&amp;quot;UTF-8&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;wrong encoding&amp;quot;" count="1"/>
			</mth>
		</class>
		<class name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor" intfc="n" abs="y" inn="n" sloc="224" jdoc="An abstract implementation of term extraction of Java Source Code @author gustavojss Tercio de Melo">
			<field name="astNode" access="prot" jdoc=""/>
			<field name="sourceCodeComments" access="prot" jdoc=""/>
			<field name="sourceCode" access="prot" jdoc=""/>
			<field name="packageName" access="prot" jdoc=""/>
			<field name="commentList" access="prot" jdoc=""/>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.SourceCodeVocabularyExtractor(String, String, List:LOCParameters)" access="pub" jdoc="Creates an abstraction for term extraction in java source code @param projectName the project&amp;apos;s name @param projectResivion the project&amp;apos;s revision name">
				<param name="projectName"/>
				<param name="projectResivion"/>
				<param name="locParameters"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.getASTTreeFromSourceCode(char[])" access="pub" jdoc="Extracts the AST tree from the source code of a .java file">
				<comm cntt="setting java compilationUnit"/>
				<param name="sourceCode"/>
				<lvar name="ASTParser" count="1"/>
				<lvar name="JavaCore" count="1"/>
				<lvar name="astNode" count="2"/>
				<lvar name="options" count="5"/>
				<lvar name="parser" count="5"/>
				<lvar name="sourceCode" count="3"/>
				<mthinv name="createAST" count="1"/>
				<mthinv name="extractCommentsFromCompilationUnit" count="1"/>
				<mthinv name="getOptions" count="1"/>
				<mthinv name="newParser" count="1"/>
				<mthinv name="put" count="3"/>
				<mthinv name="setCompilerOptions" count="1"/>
				<mthinv name="setKind" count="1"/>
				<mthinv name="setSource" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.extractCommentsFromCompilationUnit(CompilationUnit, String)" access="prot" jdoc="Stores all the Comments from the source code in a LinkedList&amp;lt;CommentUnit&amp;gt; @param compilationUnit @param sourceCode">
				<param name="compilationUnit"/>
				<param name="sourceCode"/>
				<lvar name="sourceCodeComments" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.notInInnerTypes(int, TypeDeclaration)" access="prot" jdoc="Checks if the given comment start point is not in a inner class @param commentStartPoint @param type @return">
				<param name="commentStartPoint"/>
				<param name="type"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.getTypeDeclarationComments(TypeDeclaration)" access="prot" jdoc="Extracts every comment that belong to a given class @param type @return">
				<comm cntt="Seleciona os comentarios localizados antes de qualquer entidade de encapsulamento"/>
				<comm cntt="Seleciona os comentarios localizados entre entidades de encapsulamento"/>
				<comm cntt="Seleciona os comentarios localizados depois de todas as entidades de encapsulamento mas dentro do corpo da classe"/>
				<param name="type"/>
				<lvar name="allMethods" count="1"/>
				<lvar name="classComments" count="2"/>
				<lvar name="i" count="3"/>
				<lvar name="type" count="1"/>
				<mthinv name="getMethods" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.getEnumDeclararionComments(EnumDeclaration)" access="prot" jdoc="Extracts every comment that belongs to a given enum @param enumDeclaration @return">
				<param name="enumDeclaration"/>
				<lvar name="enumComments" count="2"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.getMethodDeclarationComments(MethodDeclaration)" access="prot" jdoc="Extracts every comment that belongs to a given method @param method @return">
				<param name="method"/>
				<lvar name="methodComments" count="2"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.extractTermsFromCompilationUnit(CompilationUnit, String)" access="prot" jdoc="Manages the Enum and Class term extraction and tha Physical LOC Count validation as well @param compilationUnit AST representation of a given java file @param fileName The file name @return">
				<comm cntt="physical loc count validation"/>
				<comm cntt="for all types declared in this compilation unit"/>
				<comm cntt="for classes"/>
				<comm cntt="for enumerations"/>
				<param name="compilationUnit"/>
				<param name="fileName"/>
				<lvar name="buffer" count="2"/>
				<lvar name="commentList" count="1"/>
				<lvar name="compilationUnit" count="4"/>
				<lvar name="locCount" count="2"/>
				<lvar name="locParameters" count="1"/>
				<lvar name="name" count="3"/>
				<lvar name="pack" count="1"/>
				<lvar name="packageName" count="1"/>
				<lvar name="primeiraClasse" count="1"/>
				<lvar name="sourceCode" count="1"/>
				<mthinv name="contains" count="1"/>
				<mthinv name="getCommentList" count="1"/>
				<mthinv name="getFullyQualifiedName" count="1"/>
				<mthinv name="getName" count="1"/>
				<mthinv name="getPackage" count="3"/>
				<mthinv name="saveCompilationUnitLOCData" count="1"/>
				<lit cntt="&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;.&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.extractTermsFromEnum(StringBuffer, String, EnumDeclaration, boolean, int)" access="priv" jdoc="Manages the Enum terms extraction, LOC Count per Entity, and generation part of the VXL File @param buffer The output buffer to be printed in the resulting VXL file @param assignment The assignment to be concatenated with the entity&amp;apos;s name, which is External entity&amp;apos;s name or package name. @param anEnum The Given enum to be analyzed @param isInner The information the tells if the entity is inner to any other @param headerLines Externally provided headers count.">
				<comm cntt="Validation and management of Enum LOC extraction"/>
				<comm cntt="enum constants don&amp;apos;t have javadoc associations"/>
				<comm cntt="adding enum&amp;apos;s info"/>
				<param name="buffer"/>
				<param name="assignment"/>
				<param name="anEnum"/>
				<param name="isInner"/>
				<param name="headerLines"/>
				<lvar name="CommentUnit" count="1"/>
				<lvar name="NO_COMMENT" count="1"/>
				<lvar name="anEnum" count="6"/>
				<lvar name="assignment" count="1"/>
				<lvar name="buffer" count="3"/>
				<lvar name="commentList" count="1"/>
				<lvar name="enumComment" count="2"/>
				<lvar name="enumName" count="3"/>
				<lvar name="enumVisibility" count="1"/>
				<lvar name="headerLines" count="1"/>
				<lvar name="isInner" count="2"/>
				<lvar name="locCounter" count="2"/>
				<lvar name="locKeeper" count="3"/>
				<lvar name="locParameters" count="3"/>
				<lvar name="sourceCode" count="1"/>
				<mthinv name="contains" count="3"/>
				<mthinv name="endEnum" count="1"/>
				<mthinv name="enumComment" count="1"/>
				<mthinv name="extractVisiibility" count="1"/>
				<mthinv name="getEnumDeclararionComments" count="1"/>
				<mthinv name="getIdentifier" count="1"/>
				<mthinv name="getJavadoc" count="2"/>
				<mthinv name="getName" count="1"/>
				<mthinv name="processComment" count="1"/>
				<mthinv name="saveEntityLOCData" count="1"/>
				<mthinv name="setHeadersLOC" count="1"/>
				<mthinv name="startEnum" count="1"/>
				<mthinv name="toString" count="1"/>
				<lit cntt="&amp;quot;&amp;quot;" count="2"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.saveEntityLOCData(String, EntityLOCKeeper)" access="prot" jdoc="Increments the LOC per Entity metrics with the given information @param typeName Name of the analyzed entity @param entity Metrics keeper">
				<param name="typeName"/>
				<param name="entity"/>
				<lvar name="annotations" count="2"/>
				<lvar name="entitiesLOCContent" count="2"/>
				<lvar name="entity" count="10"/>
				<lvar name="total" count="2"/>
				<lvar name="totalAnnotation" count="1"/>
				<lvar name="totalCodeLines" count="1"/>
				<lvar name="totalHeader" count="1"/>
				<lvar name="totalInnerEntitiesLines" count="1"/>
				<lvar name="totalLOC" count="1"/>
				<mthinv name="getAnnotationsLOC" count="1"/>
				<mthinv name="getHeaderLOC" count="3"/>
				<mthinv name="getInnerEntitiesLOC" count="3"/>
				<mthinv name="getLOC" count="3"/>
				<lit cntt="&amp;quot;,&amp;quot;" count="5"/>
				<lit cntt="&amp;quot;\n,&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.saveCompilationUnitLOCData(String, PhysicalLOCCount)" access="prot" jdoc="Increments the LOC per file with the given information @param name File name @param compilationUnit Loc information keeper">
				<param name="name"/>
				<param name="compilationUnit"/>
				<lvar name="compilationUnit" count="1"/>
				<lvar name="compilationUnitLOCContent" count="2"/>
				<mthinv name="getLOC" count="1"/>
				<lit cntt="&amp;quot;,&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;\n&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.extractTermsFromType(StringBuffer, String, TypeDeclaration, boolean, int)" access="priv" jdoc="Manages the Class and Interfaces terms extraction, LOC Count per Entity, and generation part of the VXL File @param buffer The output buffer to be printed in the resulting VXL file @param assignment The assignment to be concatenated with the entity&amp;apos;s name, which is External entity&amp;apos;s name or package name. @param type The Given entity to be analyzed @param isInner The information the tells if the entity is inner to any other @param headerLines Externally provided headers count.">
				<comm cntt="adding identifier and modifiers&amp;apos; info"/>
				<comm cntt="Validation and management of Type LOC Extraction"/>
				<comm cntt="adding fields&amp;apos; info"/>
				<comm cntt="adding methods&amp;apos; info"/>
				<comm cntt="adding enum info"/>
				<comm cntt="adding inner classes&amp;apos; info"/>
				<param name="buffer"/>
				<param name="assignment"/>
				<param name="type"/>
				<param name="isInner"/>
				<param name="headerLines"/>
				<lvar name="CommentUnit" count="1"/>
				<lvar name="Modifier" count="1"/>
				<lvar name="assignment" count="1"/>
				<lvar name="buffer" count="3"/>
				<lvar name="commentList" count="1"/>
				<lvar name="headerLines" count="1"/>
				<lvar name="isAbstract" count="2"/>
				<lvar name="isInner" count="2"/>
				<lvar name="isInnerType" count="2"/>
				<lvar name="isInterface" count="2"/>
				<lvar name="locCounter" count="2"/>
				<lvar name="locKeeper" count="3"/>
				<lvar name="locParameters" count="3"/>
				<lvar name="sourceCode" count="1"/>
				<lvar name="type" count="7"/>
				<lvar name="typeComment" count="2"/>
				<lvar name="typeModifiers" count="2"/>
				<lvar name="typeName" count="3"/>
				<mthinv name="classComment" count="1"/>
				<mthinv name="contains" count="3"/>
				<mthinv name="endClass" count="1"/>
				<mthinv name="getIdentifier" count="1"/>
				<mthinv name="getJavadoc" count="2"/>
				<mthinv name="getModifiers" count="1"/>
				<mthinv name="getName" count="1"/>
				<mthinv name="getTypeDeclarationComments" count="1"/>
				<mthinv name="isAbstract" count="1"/>
				<mthinv name="isInterface" count="1"/>
				<mthinv name="processComment" count="1"/>
				<mthinv name="saveEntityLOCData" count="1"/>
				<mthinv name="setHeadersLOC" count="1"/>
				<mthinv name="startClass" count="1"/>
				<mthinv name="toString" count="1"/>
				<lit cntt="&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;n&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;y&amp;quot;" count="3"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.extractTermsFromField(StringBuffer, FieldDeclaration)" access="priv" jdoc="Saves the information from the AST about the field @param buffer buffer which keeps the result VXL file content @param field AST informations">
				<comm cntt="checks if a field is a constant"/>
				<param name="buffer"/>
				<param name="field"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.validaParametro(String)" access="priv" jdoc="Returns a converted version of the parameter models related to Generic Programming @param parametro String representation of the paremeter @return">
				<param name="parametro"/>
				<lvar name="parametro" count="10"/>
				<mthinv name="contains" count="3"/>
				<mthinv name="replace" count="3"/>
				<lit cntt="&amp;quot;&amp;gt;&amp;quot;" count="2"/>
				<lit cntt="&amp;quot;&amp;lt;&amp;quot;" count="2"/>
				<lit cntt="&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;, &amp;quot;" count="2"/>
				<lit cntt="&amp;quot;-&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;:&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.getParametersAssignatures(MethodDeclaration)" access="priv" jdoc="Returns a representation of the parameter part of the given method @param method AST method information keeper @return">
				<param name="method"/>
				<lvar name="indiceDoParametro" count="1"/>
				<lvar name="method" count="1"/>
				<lvar name="numeroDeParametros" count="1"/>
				<lvar name="retorno" count="2"/>
				<mthinv name="parameters" count="1"/>
				<mthinv name="size" count="1"/>
				<lit cntt="&amp;quot;(&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;)&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.extractTermsFromMethod(StringBuffer, String, MethodDeclaration)" access="priv" jdoc="Saves the information provided by the AST about a given method @param buffer buffer which keeps the result VXL&amp;apos;s content @param assignature The assignment to be concatenated with the method&amp;apos;s name, which is External entity&amp;apos;s name or package name. @param method AST method information keeper">
				<comm cntt="adding method name"/>
				<comm cntt="adding method parameter"/>
				<comm cntt="adding local variables"/>
				<comm cntt="finishing method"/>
				<param name="buffer"/>
				<param name="assignature"/>
				<param name="method"/>
				<lvar name="CommentUnit" count="1"/>
				<lvar name="assignature" count="1"/>
				<lvar name="buffer" count="3"/>
				<lvar name="method" count="7"/>
				<lvar name="methodComment" count="2"/>
				<lvar name="methodName" count="2"/>
				<lvar name="methodVisibility" count="2"/>
				<mthinv name="endMethod" count="1"/>
				<mthinv name="extractVisiibility" count="1"/>
				<mthinv name="getBody" count="1"/>
				<mthinv name="getIdentifier" count="1"/>
				<mthinv name="getJavadoc" count="2"/>
				<mthinv name="getMethodDeclarationComments" count="1"/>
				<mthinv name="getName" count="1"/>
				<mthinv name="getParametersAssignatures" count="1"/>
				<mthinv name="methodComment" count="1"/>
				<mthinv name="processComment" count="1"/>
				<mthinv name="startMethod" count="1"/>
				<mthinv name="toString" count="1"/>
				<lit cntt="&amp;quot;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.SourceCodeVocabularyExtractor.extractVisiibility(BodyDeclaration)" access="prot" jdoc="Returns the visibility from an entity in a String @param entityDeclaration AST representation of any structure which possesses a body @return">
				<comm cntt="verifying method modifiers"/>
				<param name="entityDeclaration"/>
				<lvar name="Modifier" count="3"/>
				<lvar name="entityDeclaration" count="1"/>
				<lvar name="entityVisibility" count="6"/>
				<lvar name="methodModifiers" count="5"/>
				<mthinv name="getModifiers" count="1"/>
				<mthinv name="isPrivate" count="1"/>
				<mthinv name="isProtected" count="1"/>
				<mthinv name="isPublic" count="1"/>
				<lit cntt="&amp;quot;friendly&amp;quot;" count="2"/>
				<lit cntt="&amp;quot;private&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;protected&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;public&amp;quot;" count="1"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.util">
		<class name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.util.FileUtil" intfc="n" abs="n" inn="n" sloc="20" jdoc="A set of file utilities @author gustavojss Tercio de Melo">
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.util.FileUtil.saveVXLFile(StringBuffer, String)" access="pub" jdoc="Saves the vocabulary content in the specified file @param fileContent the vocabulary @param vxlFileName the file name where this vocabulary will be saved">
				<param name="fileContent"/>
				<param name="vxlFileName"/>
				<lvar name="e" count="2"/>
				<lvar name="fileContent" count="1"/>
				<lvar name="out" count="3"/>
				<mthinv name="close" count="1"/>
				<mthinv name="print" count="1"/>
				<mthinv name="printStackTrace" count="1"/>
				<mthinv name="toString" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.extractor.util.FileUtil.saveLOCFile(String, String)" access="pub" jdoc="">
				<param name="locFileContent"/>
				<param name="locFileName"/>
				<lvar name="e" count="2"/>
				<lvar name="locFileContent" count="1"/>
				<lvar name="out" count="3"/>
				<mthinv name="close" count="1"/>
				<mthinv name="print" count="1"/>
				<mthinv name="printStackTrace" count="1"/>
				<lit cntt="&amp;quot;\n&amp;quot;" count="1"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount">
		<class name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter" intfc="n" abs="n" inn="n" sloc="94" jdoc="Algorithm to parse a source code and compute how many lines framework annotations of pieces of them occupies. @author Tercio de Melo">
			<field name="annotCnt" access="priv" jdoc=""/>
			<field name="limits" access="priv" jdoc=""/>
			<field name="source" access="priv" jdoc=""/>
			<field name="comments" access="priv" jdoc=""/>
			<field name="annotations" access="priv" jdoc=""/>
			<field name="sourceCode" access="priv" jdoc=""/>
			<field name="type" access="priv" jdoc=""/>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter.AnnotationCounter(AbstractTypeDeclaration, int[][], List:Comment, String)" access="pub" jdoc="Default class constructor in which receives as parameter the entity&amp;apos;s abstractions which contains informations like it&amp;apos;s range and others, as parameter there is also and array of limits representing inner entities range, a list of comments, and the source code kept in a String @param type is a TypeDeclaration, comes from the analysis of the Eclipse API for building AST and represents classes or interfaces @param limits is a bidimensional arrays of int with inner entities delimiters @param comments is a list of comments delimiters @param sourceCode the source code">
				<param name="type"/>
				<param name="limits"/>
				<param name="comments"/>
				<param name="sourceCode"/>
				<lvar name="annotCnt" count="1"/>
				<lvar name="comments" count="1"/>
				<lvar name="limits" count="1"/>
				<lvar name="sourceCode" count="2"/>
				<lvar name="type" count="1"/>
				<mthinv name="annotationCounter" count="1"/>
				<mthinv name="toCharArray" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter.getAnnotationLoc()" access="pub" jdoc="Returns the Annotation Total LOC @return">
				<lvar name="annotCnt" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter.isIdentifierPart(char)" access="priv" jdoc="">
				<param name="character"/>
				<lvar name="String" count="1"/>
				<lvar name="character" count="1"/>
				<lvar name="letters" count="2"/>
				<mthinv name="contains" count="1"/>
				<mthinv name="format" count="1"/>
				<lit cntt="&amp;quot;%c&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM0123456789&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter.annotationLength(int)" access="priv" jdoc="Computes the extension of the annotation which begins in the index given as the method&amp;apos;s parameter @param index the beginning location of current analyzed annotation. @return">
				<param name="index"/>
				<lvar name="annotations" count="1"/>
				<lvar name="close" count="3"/>
				<lvar name="i" count="7"/>
				<lvar name="inString" count="5"/>
				<lvar name="index" count="5"/>
				<lvar name="loc" count="5"/>
				<lvar name="open" count="5"/>
				<lvar name="source" count="5"/>
				<mthinv name="add" count="1"/>
				<mthinv name="isAfterBlank" count="2"/>
				<mthinv name="isBeforeBlank" count="2"/>
				<mthinv name="isIdentifierPart" count="1"/>
				<mthinv name="isInsideAnnotation" count="1"/>
				<mthinv name="nextValidCharacter" count="1"/>
				<lit cntt="&amp;apos;(&amp;apos;" count="2"/>
				<lit cntt="&amp;apos;)&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\&amp;quot;&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\n&amp;apos;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter.isInsideAnnotation(int)" access="priv" jdoc="Verifies if the given location is contained in the scope of any annotation. @param index @return">
				<param name="index"/>
				<lvar name="annotations" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter.nextValidCharacter(int)" access="priv" jdoc="Performs a forward search for the next valid character in the source code from the indicated location. A valid character is defined as not being a blank space, a new line character or a tab character. @param index the starting point for the search @return">
				<param name="index"/>
				<lvar name="index" count="1"/>
				<lvar name="source" count="4"/>
				<lit cntt="&amp;apos; &amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\n&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\t&amp;apos;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter.isBeforeBlank(int)" access="priv" jdoc="Verifies if from the given point until the end of the line there is only invalid characters @param index @return">
				<param name="index"/>
				<lvar name="i" count="2"/>
				<lvar name="source" count="3"/>
				<lit cntt="&amp;apos; &amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\n&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\t&amp;apos;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter.isAfterBlank(int)" access="priv" jdoc="Verifies if from a given point until the beginning of the current line there is only invalid characters @param index @return">
				<param name="index"/>
				<lvar name="i" count="3"/>
				<lvar name="index" count="1"/>
				<lvar name="source" count="3"/>
				<lit cntt="&amp;apos; &amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\n&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\t&amp;apos;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter.annotationCounter()" access="priv" jdoc="Manages the annotation after annotation analysis @return">
				<lvar name="counter" count="3"/>
				<lvar name="i" count="5"/>
				<lvar name="inString" count="3"/>
				<lvar name="source" count="2"/>
				<lvar name="sourceCode" count="1"/>
				<mthinv name="annotationLength" count="1"/>
				<mthinv name="isInTypeScope" count="1"/>
				<mthinv name="length" count="1"/>
				<lit cntt="&amp;apos;@&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\&amp;quot;&amp;apos;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter.isInTypeScope(int)" access="priv" jdoc="Verifies if the given location is inside the body of the current analyzed entity @param index @return">
				<param name="index"/>
				<lvar name="begin" count="3"/>
				<lvar name="end" count="2"/>
				<lvar name="index" count="4"/>
				<lvar name="type" count="2"/>
				<mthinv name="getLength" count="1"/>
				<mthinv name="getStartPosition" count="1"/>
				<mthinv name="isInComment" count="1"/>
				<mthinv name="isInInnerEntity" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter.isInInnerEntity(int)" access="priv" jdoc="Verifies if the given location is inside the body of any inner entity @param index @return">
				<param name="index"/>
				<lvar name="i" count="3"/>
				<lvar name="index" count="2"/>
				<lvar name="limits" count="2"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter.isInComment(int)" access="priv" jdoc="Verifies if the given location is inside the body of any comment that is inner the current entity @param index @return">
				<param name="index"/>
			</mth>
		<class name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter$AnnotationLimit" intfc="n" abs="n" inn="y" sloc="5" jdoc="Abstraction of annotation delimiters @author Tercio de Melo">
			<field name="begin" access="priv" jdoc=""/>
			<field name="end" access="priv" jdoc=""/>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.AnnotationCounter$AnnotationLimit.AnnotationLimit(int, int)" access="pub" jdoc="Default constructor which specifies the range of the annotation @param begin begin @param end end">
				<param name="begin"/>
				<param name="end"/>
				<lvar name="begin" count="1"/>
				<lvar name="end" count="1"/>
			</mth>
		</class>
		</class>
		<class name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.EntityLOCKeeper" intfc="n" abs="n" inn="n" sloc="22" jdoc="All this class does is keep LOC Counting information, no need for tests @author Tercio de Melo">
			<field name="loc" access="priv" jdoc=""/>
			<field name="headers" access="priv" jdoc=""/>
			<field name="innerEntitiesLOC" access="priv" jdoc=""/>
			<field name="annotations" access="priv" jdoc=""/>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.EntityLOCKeeper.EntityLOCKeeper(LOCCountPerEntity, boolean)" access="pub" jdoc="">
				<param name="locCounter"/>
				<param name="isInner"/>
				<lvar name="locCounter" count="3"/>
				<mthinv name="getAnnot" count="1"/>
				<mthinv name="getInner" count="1"/>
				<mthinv name="getLOC" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.EntityLOCKeeper.getLOC()" access="pub" jdoc="Returns the LOC Counting of a an entity @return">
				<lvar name="loc" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.EntityLOCKeeper.getInnerEntitiesLOC()" access="pub" jdoc="Returns the sum LOC Counts of the inner entities of an entity @return">
				<lvar name="innerEntitiesLOC" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.EntityLOCKeeper.getAnnotationsLOC()" access="pub" jdoc="Returns the Accontation Count of an entity @return">
				<lvar name="annotations" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.EntityLOCKeeper.getHeaderLOC()" access="pub" jdoc="Returns the Headers counting if it isn&amp;apos;t an inner entity @return">
				<lvar name="headers" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.EntityLOCKeeper.setHeadersLOC(int, boolean, boolean)" access="pub" jdoc="Set the headers loc based on an information that tells if an entity is an inner entity or not and if header count is desired. @param headersLOC Externally provided headers count @param isInner Information of being inner entity @param extractHeader Information about header extraction">
				<param name="headersLOC"/>
				<param name="isInner"/>
				<param name="extractHeader"/>
				<lvar name="headersLOC" count="1"/>
			</mth>
		</class>
		<enum name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.EntityType" sloc="5" jdoc="">
			<comm cntt="Include inner enums"/>
			<comm cntt="Extern enums only"/>
			<const name="CLASS" access="pub" jdoc=""/>
			<const name="INNER_CLASS" access="pub" jdoc=""/>
			<const name="ENUM" access="pub" jdoc=""/>
			<const name="INTERFACE" access="pub" jdoc=""/>
		</enum>
		<class name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.LOCCountPerEntity" intfc="n" abs="n" inn="n" sloc="61" jdoc="Manages physical loc extraction and annotations counting in a manner that constrains such metrics to an specific entity. @author Tercio de Melo">
			<field name="loc" access="priv" jdoc=""/>
			<field name="annot" access="priv" jdoc=""/>
			<field name="inner" access="priv" jdoc=""/>
			<field name="allComments" access="priv" jdoc=""/>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.LOCCountPerEntity.LOCCountPerEntity(AbstractTypeDeclaration, List:Comment, String)" access="pub" jdoc="Default constructor, receives an abstraction of type entity, a comment @param type @param comments @param sourceCode">
				<param name="type"/>
				<param name="comments"/>
				<param name="sourceCode"/>
				<lvar name="comments" count="3"/>
				<lvar name="sourceCode" count="2"/>
				<lvar name="type" count="3"/>
				<mthinv name="getAnnotationLoc" count="1"/>
				<mthinv name="getScopeComments" count="1"/>
				<mthinv name="locCount" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.LOCCountPerEntity.getLOC()" access="pub" jdoc="Returns the number of java code lines that belong to the given entity body but doesn&amp;apos;t belong to any inner classes. @return">
				<lvar name="loc" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.LOCCountPerEntity.getAnnot()" access="pub" jdoc="Returns the number of Annotations Line that belong to the given entity body but doesn&amp;apos;t belong to any inner classes. @return">
				<lvar name="annot" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.LOCCountPerEntity.getInner()" access="pub" jdoc="Returns the sum of the inner classes&amp;apos; LOC Count per Entity @return">
				<lvar name="inner" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.LOCCountPerEntity.innerLimits(AbstractTypeDeclaration)" access="priv" jdoc="Creates an array of indices that delimit the begin and end of each inner class. @param type The given type which provides the necessary inner entities information. @return">
				<comm cntt="if it isn&amp;apos;t a class or an interface, it has no inner entity"/>
				<param name="type"/>
				<lvar name="i" count="3"/>
				<lvar name="innerTypes" count="3"/>
				<lvar name="retorno" count="5"/>
				<lvar name="type" count="2"/>
				<lvar name="typeDecl" count="2"/>
				<mthinv name="getLength" count="1"/>
				<mthinv name="getStartPosition" count="1"/>
				<mthinv name="getTypes" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.LOCCountPerEntity.locCount(AbstractTypeDeclaration, List:Comment, String)" access="priv" jdoc="This method is responsible for the management of Physical LOC counting, annotations counting and inner entities Physical LOC subtraction. @param type The given type to be analyzed. @param comments A list of selected comments by the getScopeComments() method @param sourceCode The String representation of the source file containing the given entity @return The number of Java Code lines contained in the given entity.">
				<comm cntt="The AST considers the beginning of an Javadoc as the beginning of the given entity, we don&amp;apos;t. So, if there&amp;apos;s any javadoc, it&amp;apos;s end point will be the entity&amp;apos;s beginning point"/>
				<comm cntt="The end point is the beginnig point plus the entity&amp;apos;s length"/>
				<comm cntt="the temporary loc of the entity is it&amp;apos;s physical loc count"/>
				<param name="type"/>
				<param name="comments"/>
				<param name="sourceCode"/>
				<lvar name="begin" count="2"/>
				<lvar name="comments" count="1"/>
				<lvar name="end" count="2"/>
				<lvar name="linesOfCode" count="5"/>
				<lvar name="sourceCode" count="1"/>
				<lvar name="type" count="6"/>
				<mthinv name="getJavadoc" count="2"/>
				<mthinv name="getLOC" count="1"/>
				<mthinv name="getLength" count="2"/>
				<mthinv name="getStartPosition" count="2"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.LOCCountPerEntity.isInScope(AbstractTypeDeclaration, int)" access="priv" jdoc="Verifies if the given index is inside the body declaration of the given type @param type Abstract type, which might be Enum, Class or Interface. @param index Given index @return">
				<param name="type"/>
				<param name="index"/>
				<lvar name="begin" count="4"/>
				<lvar name="end" count="2"/>
				<lvar name="index" count="2"/>
				<lvar name="type" count="4"/>
				<mthinv name="getJavadoc" count="2"/>
				<mthinv name="getLength" count="2"/>
				<mthinv name="getStartPosition" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.LOCCountPerEntity.getScopeComments(AbstractTypeDeclaration, List:Comment)" access="priv" jdoc="Generates a list of comments which are located within the given entity&amp;apos;s body declaration. @param type Given entity which might be Enum, Class or Interface. @param comments List of comments, which includes all valid scope comments @return">
				<param name="type"/>
				<param name="comments"/>
				<lvar name="comm" count="2"/>
			</mth>
		</class>
		<enum name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.LOCParameters" sloc="3" jdoc="Constants that will be used to manage tha LOC Extraction @author Tercio de Melo">
			<const name="LOC" access="pub" jdoc=""/>
			<const name="HEADERS" access="pub" jdoc=""/>
			<const name="ANNOTATIONS" access="pub" jdoc=""/>
			<const name="INNER_CLASSES" access="pub" jdoc=""/>
			<const name="ONLY_PHYSICAL_LINES" access="pub" jdoc=""/>
		</enum>
		<class name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.PhysicalLOCCount" intfc="n" abs="n" inn="n" sloc="81" jdoc="Computes the number of physical lines of java code is there in a given scope @author Tercio de Melo">
			<field name="sourceCode" access="priv" jdoc="has the source code of a java file"/>
			<field name="loc" access="priv" jdoc="&amp;lt;b&amp;gt;loc&amp;lt; b&amp;gt; represents the number of physical lines of java code &amp;lt;b&amp;gt;start&amp;lt; b&amp;gt; marks the begin of the analyzed scope &amp;lt;b&amp;gt;finall&amp;lt;b&amp;gt; marks the end of the analyzed scope"/>
			<field name="start" access="priv" jdoc="&amp;lt;b&amp;gt;loc&amp;lt; b&amp;gt; represents the number of physical lines of java code &amp;lt;b&amp;gt;start&amp;lt; b&amp;gt; marks the begin of the analyzed scope &amp;lt;b&amp;gt;finall&amp;lt;b&amp;gt; marks the end of the analyzed scope"/>
			<field name="finall" access="priv" jdoc="&amp;lt;b&amp;gt;loc&amp;lt; b&amp;gt; represents the number of physical lines of java code &amp;lt;b&amp;gt;start&amp;lt; b&amp;gt; marks the begin of the analyzed scope &amp;lt;b&amp;gt;finall&amp;lt;b&amp;gt; marks the end of the analyzed scope"/>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.PhysicalLOCCount.PhysicalLOCCount(List:Comment, String, int)" access="pub" jdoc="Class constructor in which no scope is given. Thus, all the java file will be analyzed @param comments is a list of comments delimiters @param sourceCode is the entire source code of a java file @param linesOfCode is the number of written lines in the source code, note that it includes empty lines and comment lines as well.">
				<param name="comments"/>
				<param name="sourceCode"/>
				<param name="linesOfCode"/>
				<lvar name="sourceCode" count="1"/>
				<mthinv name="length" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.PhysicalLOCCount.PhysicalLOCCount(List:Comment, String, int, int, int)" access="pub" jdoc="Class constructor in which the scope of analysis is specified, is useful when the goal of the loc analysis is a specific entity inside the source code and the delimiters of this entity is known. @param comments is a list of comments delimiters @param sourceCode is the entire source code of a java file @param linesOfCode is the number of written lines in the source code, including empty and comments lines @param start is the begin delimiter of the analisis @param finall is the end delimiter of the analisis">
				<comm cntt="Usado para debug"/>
				<comm cntt="System.out.println(&amp;quot;====&amp;quot;+ allCommentsLOC(comments));"/>
				<param name="comments"/>
				<param name="sourceCode"/>
				<param name="linesOfCode"/>
				<param name="start"/>
				<param name="finall"/>
				<lvar name="comments" count="2"/>
				<lvar name="finall" count="1"/>
				<lvar name="linesOfCode" count="1"/>
				<lvar name="sourceCode" count="2"/>
				<lvar name="start" count="1"/>
				<mthinv name="allCommentsLOC" count="1"/>
				<mthinv name="numbeOfEmptyLines" count="1"/>
				<mthinv name="toCharArray" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.PhysicalLOCCount.getLOC()" access="pub" jdoc="Returns the number of Java Code Lines @return">
				<lvar name="loc" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.PhysicalLOCCount.numbeOfEmptyLines(String, List:Comment)" access="priv" jdoc="Manages the line-by-line analysis for empty lines of the source Code @param sourceCode the entire source code @return">
				<param name="sourceCode"/>
				<param name="comments"/>
				<lvar name="emptyLines" count="2"/>
				<lvar name="finall" count="1"/>
				<lvar name="scopo" count="1"/>
				<lvar name="sourceCode" count="1"/>
				<lvar name="start" count="1"/>
				<mthinv name="substring" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.PhysicalLOCCount.isEmptyLine(String)" access="priv" jdoc="Verifies if a given line of code abstracted as a String is empty In this case, empty is understood by containing no other characters than blank spaces, tabs and form feed @param line @return">
				<param name="line"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.PhysicalLOCCount.allCommentsLOC(List:Comment)" access="priv" jdoc="Manages the comment-by-comment computation of the whole extension of comments in the code @param commentList a list of comments delimiters @return">
				<param name="commentList"/>
				<lvar name="loc" count="2"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.PhysicalLOCCount.isAfterValidCode(int)" access="priv" jdoc="Does a forward search for physical code from a given location until the end of the line @param begin index of character in the source code @return">
				<param name="begin"/>
				<lvar name="begin" count="1"/>
				<lvar name="i" count="3"/>
				<lvar name="sourceCode" count="3"/>
				<lit cntt="&amp;apos; &amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\n&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\t&amp;apos;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.PhysicalLOCCount.isBeforeValidCode(int)" access="priv" jdoc="Does a backward search for physical code from a given location until the begin of the line @param end @return">
				<param name="end"/>
				<lvar name="i" count="3"/>
				<lvar name="sourceCode" count="4"/>
				<lit cntt="&amp;apos; &amp;apos;" count="2"/>
				<lit cntt="&amp;apos;\n&amp;apos;" count="1"/>
				<lit cntt="&amp;apos;\t&amp;apos;" count="1"/>
			</mth>
			<mth name="/src/main/java/:org.splabs.vocabulary.vxl.vloccount.PhysicalLOCCount.commentLOC(Comment)" access="priv" jdoc="Computes the LOC of a given comment @param comment @return">
				<comm cntt="Retirando as linhas em branco presentes"/>
				<comm cntt="num comentário de bloco"/>
				<comm cntt="Testa se o comentario eh de bloco e ocupa uma unica linha e esta depois de codigo valido"/>
				<comm cntt="para evitar que comentarios do tipo"/>
				<comm cntt=""/>
				<comm cntt="codigoQualquer(tipo param, Comentario )"/>
				<comm cntt=""/>
				<comm cntt="sejam contabilizados como contendo -1 linhas"/>
				<comm cntt="Essa situacao acontece quando temos codigo valido apos o comentario: comment codigo valido"/>
				<param name="comment"/>
				<lvar name="begin" count="5"/>
				<lvar name="comment" count="3"/>
				<lvar name="commentLines" count="1"/>
				<lvar name="currentComment" count="2"/>
				<lvar name="end" count="3"/>
				<lvar name="loc" count="8"/>
				<lvar name="sourceCode" count="1"/>
				<mthinv name="getLength" count="1"/>
				<mthinv name="getStartPosition" count="1"/>
				<mthinv name="isAfterValidCode" count="2"/>
				<mthinv name="isBeforeValidCode" count="1"/>
				<mthinv name="split" count="1"/>
				<mthinv name="substring" count="1"/>
				<lit cntt="&amp;quot;\n&amp;quot;" count="1"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/src/test/java/:test">
		<class name="/src/test/java/:test.AnnotationsTest" intfc="n" abs="n" inn="n" sloc="45" jdoc="Tests the AnnotationCounter class @author tercio">
			<field name="testFilesDir" access="priv" jdoc=""/>
			<field name="oneLineAnnotationsFile" access="priv" jdoc=""/>
			<field name="multipleLinesAnnotatinosFile" access="priv" jdoc=""/>
			<field name="AnnotationsAndJavadocsFile" access="priv" jdoc=""/>
			<field name="countlessAnnotationsFile" access="priv" jdoc=""/>
			<mth name="/src/test/java/:test.AnnotationsTest.getASTTreeFromSourceCode(char[])" access="priv" jdoc="">
				<comm cntt="setting java compilationUnit"/>
				<param name="sourceCode"/>
				<lvar name="ASTParser" count="1"/>
				<lvar name="JavaCore" count="1"/>
				<lvar name="options" count="5"/>
				<lvar name="parser" count="5"/>
				<lvar name="sourceCode" count="1"/>
				<mthinv name="createAST" count="1"/>
				<mthinv name="getOptions" count="1"/>
				<mthinv name="newParser" count="1"/>
				<mthinv name="put" count="3"/>
				<mthinv name="setCompilerOptions" count="1"/>
				<mthinv name="setKind" count="1"/>
				<mthinv name="setSource" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.AnnotationsTest.getAnnotCount(String)" access="priv" jdoc="">
				<param name="file"/>
				<lvar name="String" count="1"/>
				<lvar name="aux" count="3"/>
				<lvar name="compilationUnit" count="1"/>
				<lvar name="count" count="2"/>
				<lvar name="in" count="2"/>
				<lvar name="limits" count="1"/>
				<lvar name="sourceCode" count="4"/>
				<mthinv name="format" count="1"/>
				<mthinv name="getASTTreeFromSourceCode" count="1"/>
				<mthinv name="readLine" count="1"/>
				<mthinv name="toCharArray" count="1"/>
				<lit cntt="&amp;quot;%s\n%s&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.AnnotationsTest.testOneLineAnnotationsFile()" access="pub" jdoc="">
				<lvar name="Assert" count="1"/>
				<lvar name="oneLineAnnotationsFile" count="1"/>
				<mthinv name="assertTrue" count="1"/>
				<mthinv name="getAnnotCount" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.AnnotationsTest.testMultipleLinesAnnotationsFile()" access="pub" jdoc="">
				<lvar name="Assert" count="1"/>
				<lvar name="multipleLinesAnnotatinosFile" count="1"/>
				<mthinv name="assertTrue" count="1"/>
				<mthinv name="getAnnotCount" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.AnnotationsTest.testAnnotationsAndJavadocsFile()" access="pub" jdoc="">
				<lvar name="AnnotationsAndJavadocsFile" count="1"/>
				<lvar name="Assert" count="1"/>
				<mthinv name="assertTrue" count="1"/>
				<mthinv name="getAnnotCount" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.AnnotationsTest.testCountlessAnnotationsFile()" access="pub" jdoc="">
				<lvar name="Assert" count="1"/>
				<lvar name="countlessAnnotationsFile" count="1"/>
				<mthinv name="assertTrue" count="1"/>
				<mthinv name="getAnnotCount" count="1"/>
			</mth>
		</class>
		<class name="/src/test/java/:test.JavaFolderTermExtractorTest" intfc="n" abs="n" inn="n" sloc="214" jdoc="">
			<field name="vxlHandler" access="priv" jdoc=""/>
			<field name="entityProps" access="priv" jdoc=""/>
			<mth name="/src/test/java/:test.JavaFolderTermExtractorTest.JavaFolderTermExtractorTest()" access="pub" jdoc="">
			</mth>
			<mth name="/src/test/java/:test.JavaFolderTermExtractorTest.setUp()" access="pub" jdoc="">
				<comm cntt="deleting previously saved vocabulary"/>
				<comm cntt="Loc extration parameters"/>
				<comm cntt="extracting vocabulary"/>
				<comm cntt="parsing vxl file"/>
				<lvar name="XMLReaderFactory" count="1"/>
				<lvar name="e" count="4"/>
				<lvar name="locParam" count="7"/>
				<lvar name="r" count="2"/>
				<lvar name="resultFile" count="3"/>
				<lvar name="vocExtractor" count="2"/>
				<lvar name="vxlFileName" count="2"/>
				<lvar name="xr" count="4"/>
				<mthinv name="add" count="5"/>
				<mthinv name="createXMLReader" count="1"/>
				<mthinv name="delete" count="1"/>
				<mthinv name="exists" count="1"/>
				<mthinv name="extractTermsFromJavaFolder" count="1"/>
				<mthinv name="getEntityProps" count="1"/>
				<mthinv name="parse" count="1"/>
				<mthinv name="printStackTrace" count="2"/>
				<mthinv name="setContentHandler" count="1"/>
				<mthinv name="setErrorHandler" count="1"/>
				<lit cntt="&amp;quot;. files XmlToXsd xmltoxsd.csv&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;. files XmlToXsd xmltoxsd.vxl&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;. files XmlToXsd&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;1.0&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;xml2xsd&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.JavaFolderTermExtractorTest.testPackages()" access="pub" jdoc="">
				<mthinv name="assertFalse" count="1"/>
				<mthinv name="assertTrue" count="4"/>
				<mthinv name="containsKey" count="3"/>
				<mthinv name="get" count="2"/>
				<mthinv name="isEmpty" count="2"/>
				<lit cntt="&amp;quot;com&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;com.pacote2&amp;quot;" count="2"/>
				<lit cntt="&amp;quot;com.xml2xsd&amp;quot;" count="2"/>
			</mth>
			<mth name="/src/test/java/:test.JavaFolderTermExtractorTest.testClasses()" access="pub" jdoc="">
				<comm cntt="System.out.println(attributeValue);"/>
				<lvar name="attributeName" count="20"/>
				<lvar name="attributeValue" count="20"/>
				<lvar name="classProps" count="8"/>
				<lvar name="it" count="16"/>
				<mthinv name="assertFalse" count="4"/>
				<mthinv name="assertTrue" count="20"/>
				<mthinv name="containsKey" count="4"/>
				<mthinv name="equals" count="32"/>
				<mthinv name="get" count="8"/>
				<mthinv name="hasNext" count="4"/>
				<mthinv name="isEmpty" count="4"/>
				<mthinv name="iterator" count="4"/>
				<mthinv name="next" count="8"/>
				<lit cntt="&amp;quot;&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;Javadoc da classe Generica @author katyusco&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;com.pacote2.EmptyClass&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;com.pacote2.EmptyMethod&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;com.xml2xsd.GenericClass$Interna&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;com.xml2xsd.GenericClass&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;inner&amp;quot;" count="4"/>
				<lit cntt="&amp;quot;interface&amp;quot;" count="4"/>
				<lit cntt="&amp;quot;javadoc&amp;quot;" count="4"/>
				<lit cntt="&amp;quot;n&amp;quot;" count="11"/>
				<lit cntt="&amp;quot;static&amp;quot;" count="4"/>
				<lit cntt="&amp;quot;y&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.JavaFolderTermExtractorTest.testAttributes()" access="pub" jdoc="">
				<lvar name="attributeName" count="18"/>
				<lvar name="attributeProps" count="12"/>
				<lvar name="attributeValue" count="18"/>
				<lvar name="it" count="24"/>
				<mthinv name="assertFalse" count="6"/>
				<mthinv name="assertTrue" count="18"/>
				<mthinv name="containsKey" count="6"/>
				<mthinv name="equals" count="24"/>
				<mthinv name="get" count="12"/>
				<mthinv name="hasNext" count="6"/>
				<mthinv name="isEmpty" count="6"/>
				<mthinv name="iterator" count="6"/>
				<mthinv name="next" count="12"/>
				<lit cntt="&amp;quot;&amp;quot;" count="6"/>
				<lit cntt="&amp;quot;PRIVATE_CONSTANTE&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;PUBLIC_CONSTANTE&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;comment&amp;quot;" count="4"/>
				<lit cntt="&amp;quot;javadoc&amp;quot;" count="2"/>
				<lit cntt="&amp;quot;private&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;private_atributo&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;private_atributo__interna&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;public&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;public_atributo&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;public_atributo_interna&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;visibility&amp;quot;" count="6"/>
			</mth>
			<mth name="/src/test/java/:test.JavaFolderTermExtractorTest.testMethods()" access="pub" jdoc="">
				<lvar name="attributeName" count="9"/>
				<lvar name="attributeProps" count="6"/>
				<lvar name="attributeValue" count="9"/>
				<lvar name="it" count="12"/>
				<mthinv name="assertFalse" count="3"/>
				<mthinv name="assertTrue" count="9"/>
				<mthinv name="containsKey" count="3"/>
				<mthinv name="equals" count="12"/>
				<mthinv name="get" count="6"/>
				<mthinv name="hasNext" count="3"/>
				<mthinv name="isEmpty" count="3"/>
				<mthinv name="iterator" count="3"/>
				<mthinv name="next" count="6"/>
				<lit cntt="&amp;quot;&amp;quot;" count="2"/>
				<lit cntt="&amp;quot;Javadoc do método public_metodo @param parametro1 @param parametro2 @return&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;com.pacote2.EmptyMethod.methodWithNoBody()&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;com.xml2xsd.GenericClass.private_metodo(String, boolean)&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;com.xml2xsd.GenericClass.public_metodo(String, boolean)&amp;quot;" count="3"/>
				<lit cntt="&amp;quot;comment&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;javadoc&amp;quot;" count="2"/>
				<lit cntt="&amp;quot;private&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;public&amp;quot;" count="2"/>
				<lit cntt="&amp;quot;visibility&amp;quot;" count="3"/>
			</mth>
			<mth name="/src/test/java/:test.JavaFolderTermExtractorTest.testParameters()" access="pub" jdoc="">
				<mthinv name="assertTrue" count="4"/>
				<mthinv name="containsKey" count="2"/>
				<mthinv name="get" count="2"/>
				<mthinv name="isEmpty" count="2"/>
				<lit cntt="&amp;quot;parametro1&amp;quot;" count="2"/>
				<lit cntt="&amp;quot;parametro2&amp;quot;" count="2"/>
			</mth>
			<mth name="/src/test/java/:test.JavaFolderTermExtractorTest.testLocalVariables()" access="pub" jdoc="">
				<mthinv name="assertTrue" count="2"/>
				<mthinv name="containsKey" count="1"/>
				<mthinv name="get" count="1"/>
				<mthinv name="isEmpty" count="1"/>
				<lit cntt="&amp;quot;local_variavel&amp;quot;" count="2"/>
			</mth>
		</class>
		<class name="/src/test/java/:test.LocPerEntityTest" intfc="n" abs="n" inn="n" sloc="77" jdoc="Tests the LOCCountPerEntity class @author Tercio de Melo">
			<field name="testFilesDir" access="priv" jdoc=""/>
			<field name="simpleFile" access="priv" jdoc=""/>
			<field name="noBlankLinesFile" access="priv" jdoc=""/>
			<field name="noCommentsFile" access="priv" jdoc=""/>
			<field name="noAnnotationsFile" access="priv" jdoc=""/>
			<field name="complexFile" access="priv" jdoc=""/>
			<mth name="/src/test/java/:test.LocPerEntityTest.getASTTreeFromSourceCode(char[])" access="priv" jdoc="">
				<comm cntt="setting java compilationUnit"/>
				<param name="sourceCode"/>
				<lvar name="ASTParser" count="1"/>
				<lvar name="JavaCore" count="1"/>
				<lvar name="options" count="5"/>
				<lvar name="parser" count="5"/>
				<lvar name="sourceCode" count="1"/>
				<mthinv name="createAST" count="1"/>
				<mthinv name="getOptions" count="1"/>
				<mthinv name="newParser" count="1"/>
				<mthinv name="put" count="3"/>
				<mthinv name="setCompilerOptions" count="1"/>
				<mthinv name="setKind" count="1"/>
				<mthinv name="setSource" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.LocPerEntityTest.assertLocCountPerEntity(String)" access="priv" jdoc="">
				<param name="file"/>
				<lvar name="String" count="1"/>
				<lvar name="aux" count="3"/>
				<lvar name="compilationUnit" count="1"/>
				<lvar name="in" count="2"/>
				<lvar name="sourceCode" count="4"/>
				<mthinv name="format" count="1"/>
				<mthinv name="getASTTreeFromSourceCode" count="1"/>
				<mthinv name="readLine" count="1"/>
				<mthinv name="toCharArray" count="1"/>
				<lit cntt="&amp;quot;%s\n%s&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.LocPerEntityTest.getLocCountPerEntity(String)" access="priv" jdoc="">
				<param name="file"/>
				<lvar name="String" count="1"/>
				<lvar name="aux" count="3"/>
				<lvar name="compilationUnit" count="3"/>
				<lvar name="in" count="2"/>
				<lvar name="sourceCode" count="4"/>
				<lvar name="totalEntitiesLOC" count="2"/>
				<mthinv name="format" count="1"/>
				<mthinv name="getASTTreeFromSourceCode" count="1"/>
				<mthinv name="getPackage" count="1"/>
				<mthinv name="imports" count="1"/>
				<mthinv name="readLine" count="1"/>
				<mthinv name="size" count="1"/>
				<mthinv name="toCharArray" count="1"/>
				<lit cntt="&amp;quot;%s\n%s&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.LocPerEntityTest.getPhysicalLocCount(String)" access="priv" jdoc="">
				<param name="file"/>
				<lvar name="String" count="1"/>
				<lvar name="aux" count="3"/>
				<lvar name="compilationUnit" count="1"/>
				<lvar name="in" count="2"/>
				<lvar name="sourceCode" count="5"/>
				<mthinv name="format" count="1"/>
				<mthinv name="getASTTreeFromSourceCode" count="1"/>
				<mthinv name="getLOC" count="1"/>
				<mthinv name="readLine" count="1"/>
				<mthinv name="toCharArray" count="1"/>
				<lit cntt="&amp;quot;%s\n%s&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.LocPerEntityTest.testSimpleFile()" access="pub" jdoc="">
				<lvar name="Assert" count="2"/>
				<lvar name="simpleFile" count="3"/>
				<mthinv name="assertLocCountPerEntity" count="1"/>
				<mthinv name="assertTrue" count="2"/>
				<mthinv name="getLocCountPerEntity" count="1"/>
				<mthinv name="getPhysicalLocCount" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.LocPerEntityTest.testNoBlankLinesFile()" access="pub" jdoc="">
				<lvar name="Assert" count="2"/>
				<lvar name="noBlankLinesFile" count="3"/>
				<mthinv name="assertLocCountPerEntity" count="1"/>
				<mthinv name="assertTrue" count="2"/>
				<mthinv name="getLocCountPerEntity" count="1"/>
				<mthinv name="getPhysicalLocCount" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.LocPerEntityTest.testNoCommentsFile()" access="pub" jdoc="">
				<lvar name="Assert" count="2"/>
				<lvar name="noCommentsFile" count="3"/>
				<mthinv name="assertLocCountPerEntity" count="1"/>
				<mthinv name="assertTrue" count="2"/>
				<mthinv name="getLocCountPerEntity" count="1"/>
				<mthinv name="getPhysicalLocCount" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.LocPerEntityTest.testNoAnnotationsFile()" access="pub" jdoc="">
				<lvar name="Assert" count="2"/>
				<lvar name="noAnnotationsFile" count="3"/>
				<mthinv name="assertLocCountPerEntity" count="1"/>
				<mthinv name="assertTrue" count="2"/>
				<mthinv name="getLocCountPerEntity" count="1"/>
				<mthinv name="getPhysicalLocCount" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.LocPerEntityTest.testComplexFile()" access="pub" jdoc="">
				<lvar name="Assert" count="2"/>
				<lvar name="complexFile" count="3"/>
				<mthinv name="assertLocCountPerEntity" count="1"/>
				<mthinv name="assertTrue" count="2"/>
				<mthinv name="getLocCountPerEntity" count="1"/>
				<mthinv name="getPhysicalLocCount" count="1"/>
			</mth>
		</class>
		<class name="/src/test/java/:test.PhysicalLocTest" intfc="n" abs="n" inn="n" sloc="48" jdoc="Tests the PhysicalLOCCount class @author Tercio de Melo">
			<field name="testFilesDir" access="priv" jdoc=""/>
			<field name="simpleFile" access="priv" jdoc=""/>
			<field name="noBlankLinesFile" access="priv" jdoc=""/>
			<field name="noCommentsFile" access="priv" jdoc=""/>
			<field name="noAnnotationsFile" access="priv" jdoc=""/>
			<field name="complexFile" access="priv" jdoc=""/>
			<mth name="/src/test/java/:test.PhysicalLocTest.getASTTreeFromSourceCode(char[])" access="priv" jdoc="">
				<comm cntt="setting java compilationUnit"/>
				<param name="sourceCode"/>
				<lvar name="ASTParser" count="1"/>
				<lvar name="JavaCore" count="1"/>
				<lvar name="options" count="5"/>
				<lvar name="parser" count="5"/>
				<lvar name="sourceCode" count="1"/>
				<mthinv name="createAST" count="1"/>
				<mthinv name="getOptions" count="1"/>
				<mthinv name="newParser" count="1"/>
				<mthinv name="put" count="3"/>
				<mthinv name="setCompilerOptions" count="1"/>
				<mthinv name="setKind" count="1"/>
				<mthinv name="setSource" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.PhysicalLocTest.getPhysicalLocCount(String)" access="priv" jdoc="">
				<param name="file"/>
				<lvar name="String" count="1"/>
				<lvar name="aux" count="3"/>
				<lvar name="compilationUnit" count="1"/>
				<lvar name="count" count="3"/>
				<lvar name="counter" count="2"/>
				<lvar name="in" count="2"/>
				<lvar name="sourceCode" count="5"/>
				<mthinv name="format" count="1"/>
				<mthinv name="getASTTreeFromSourceCode" count="1"/>
				<mthinv name="getLOC" count="1"/>
				<mthinv name="readLine" count="1"/>
				<mthinv name="toCharArray" count="1"/>
				<lit cntt="&amp;quot;%s\n%s&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.PhysicalLocTest.testSimpleFile()" access="pub" jdoc="">
				<lvar name="Assert" count="1"/>
				<lvar name="simpleFile" count="1"/>
				<mthinv name="assertTrue" count="1"/>
				<mthinv name="getPhysicalLocCount" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.PhysicalLocTest.testNoBlankLinesFile()" access="pub" jdoc="">
				<lvar name="Assert" count="1"/>
				<lvar name="noBlankLinesFile" count="1"/>
				<mthinv name="assertTrue" count="1"/>
				<mthinv name="getPhysicalLocCount" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.PhysicalLocTest.testNoCommentsFile()" access="pub" jdoc="">
				<lvar name="Assert" count="1"/>
				<lvar name="noCommentsFile" count="1"/>
				<mthinv name="assertTrue" count="1"/>
				<mthinv name="getPhysicalLocCount" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.PhysicalLocTest.testNoAnnotationsFile()" access="pub" jdoc="">
				<lvar name="Assert" count="1"/>
				<lvar name="noAnnotationsFile" count="1"/>
				<mthinv name="assertTrue" count="1"/>
				<mthinv name="getPhysicalLocCount" count="1"/>
			</mth>
			<mth name="/src/test/java/:test.PhysicalLocTest.testComplexFile()" access="pub" jdoc="">
				<lvar name="Assert" count="1"/>
				<lvar name="complexFile" count="1"/>
				<mthinv name="assertTrue" count="1"/>
				<mthinv name="getPhysicalLocCount" count="1"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/src/test/java/:util">
		<class name="/src/test/java/:util.VXLHandler" intfc="n" abs="n" inn="n" sloc="34" jdoc="">
			<comm cntt="http: www.java2s.com Code JavaAPI org.xml.sax.helpers extendsDefaultHandler.htm"/>
			<comm cntt="http: www.saxproject.org quickstart.html"/>
			<comm cntt="http: tutorials.jenkov.com java-xml sax-defaulthandler.html"/>
			<field name="entities" access="priv" jdoc=""/>
			<mth name="/src/test/java/:util.VXLHandler.VXLHandler()" access="pub" jdoc="">
			</mth>
			<mth name="/src/test/java/:util.VXLHandler.startElement(String, String, String, Attributes)" access="pub" jdoc="">
				<param name="uri"/>
				<param name="localName"/>
				<param name="qName"/>
				<param name="attributes"/>
				<lvar name="attributeName" count="5"/>
				<lvar name="attributeValue" count="3"/>
				<lvar name="attributes" count="3"/>
				<lvar name="entityName" count="3"/>
				<lvar name="entityProperties" count="4"/>
				<lvar name="i" count="5"/>
				<mthinv name="add" count="2"/>
				<mthinv name="equals" count="3"/>
				<mthinv name="getLength" count="1"/>
				<mthinv name="getQName" count="1"/>
				<mthinv name="getValue" count="1"/>
				<mthinv name="put" count="1"/>
				<lit cntt="&amp;quot;&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;id&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;name&amp;quot;" count="1"/>
				<lit cntt="&amp;quot;namespace&amp;quot;" count="1"/>
			</mth>
			<mth name="/src/test/java/:util.VXLHandler.getEntityProps()" access="pub" jdoc="">
			</mth>
			<mth name="/src/test/java/:util.VXLHandler.main(String[])" access="pub" jdoc="">
				<param name="args"/>
				<lvar name="XMLReaderFactory" count="1"/>
				<lvar name="handler" count="3"/>
				<lvar name="r" count="2"/>
				<lvar name="vxlFileName" count="2"/>
				<lvar name="xr" count="4"/>
				<mthinv name="createXMLReader" count="1"/>
				<mthinv name="parse" count="1"/>
				<mthinv name="setContentHandler" count="1"/>
				<mthinv name="setErrorHandler" count="1"/>
				<lit cntt="&amp;quot;C:\\workspace\\eclipse-sourceBuild-srcIncluded-3.0\\eclipse-sourceBuild-srcIncluded-3.0.vxl&amp;quot;" count="1"/>
			</mth>
		</class>
	</pkg>
</java-project>