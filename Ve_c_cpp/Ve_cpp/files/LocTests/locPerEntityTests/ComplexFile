 /*Aplicativo completo com todas as entidades e estruturas de um
 * Aplicativo em C.
 * Autor: Israel Gomes de Lima
 * Data: 20/09/2017
 */
 
#include<iostream>
#include<string>

 //Variaveis globais
signed char varCharComSignal;
unsigned int varIntUnsigned;
long double varLongDouble;
short int varShortInt;
const int varConst = 10;
volatile int varVolatil;
extern float varExtern;
static double varStatic;
int varAutoImplicita;
int *ptrGlobal;
float **ptrParaPtrGlobal;

using std::string;
using std::cout;

//Prototipos de funções
int prototipo1();
int protoripo2(int, int);
int protoripo3(int x, int y);
void prototipo4(int);
void prototipo5(string x = "valor");
void prototipo6(int, string, double);


/**Abaixo funções para demonstrar o
 * Uso de Funções em c++
 */
int funcao1()
{
	//comentário interni=o
	int variavelLocal;
	
	/*Comentário de bloco interno a função**/
	struct estrutura
	{
		int membro1;
		int membro2;
		double membroVetor[10];

	};
	
	union uniao
	{
		int membro1;
		int membro2;
		double membroVetor[10];
	};

	enum enum1
	{
		CONST1, CONST2, CONST3, CONST4, CONST5, CONST6 = 100, CONST7, CONST8, CONST9, CONST10/*enumaration*/
	}

	//Usando classes
	class Generic1
	{
		//Comentário de linha no inicio da classe
	private:
    	string nome, jogo;
   		int quantidade;

	public:

    	string nomePublico;
    	int x = funcc(varx);

		//Construtor da classe
    	Generic1()
    	{
        	nome = "";
        	jogo = "";
    	}

		//Construtor 2 da classe
    	Generic1(string name)
    	{
        	nome = name;
    	}

		/*Construtor
		* 3 da classe*/
    	Generic1(int quantidade1, string name = "valor")
    	{
    		/*Comentário do construtor*/
        	quantidade = quantidade1;
        	nome = name;
    	}

		/*Destrutor*/
    	~Generic1()
    	{
    		/*Corpo do destrutor*/
    		//Com comentário simples e de bloco
    	}
		/**fora do destrutor**/
	};
	variavelLocal = 20;
}

/*Usando estruturas, uniões enumerações e
 * tipos definidos pelo usuario
 */

/*comentario de bloco antes da estrutura
 * */
struct estrutura1 /*comentario de bloco da estrutura*/
{
	/*comentario1 de bloco da estrutura*/
	int membro1;
	/*comentario2 de bloco da estrutura*/
	int membro2;
	double membroVetor[10];
	/*comentario3 de bloco da estrutura*/
}/*comentario4 de bloco da estrutura*/;/*comentario de bloco fora da estrutura*/
/*comentario de bloco no fim da estrutura*/

/*usando unions
 * 1
 */
union union1/*comentario de bloco na union*/
{
	/*comentario1 de bloco na union*/
	int membro1;
	/*comentario2 de bloco na union
	 */
	int membro2;
	double membroVetor[10];
	/*comentario3 de bloco na union*/
}/*comentario4 de bloco na union*/;/*comentario de bloco fora da union*/
/*comentario de bloco fora da union*/


//enumeracoes
enum enumeration // enumaration1
{
	//enumeration
	CONST1, CONST2, CONST3, CONST4, CONST5, CONST6 = 100, CONST7, CONST8, CONST9, CONST10/*enumaration*/
	//enum
}/*enuma*/;//fora da enum


//Usando classes
class GenericClass1
{
//Comentário de linha no inicio da classe
private:
    string nome, jogo;
    int quantidade;

public:

    string nomePublico;
    int x = funcc(varx);

	//Construtor da classe
    GenericClass1()
    {
        nome = "";
        jogo = "";
    }

	//Construtor 2 da classe
    GenericClass1(string name)
    {
        nome = name;
    }

	/*Construtor
	* 3 da classe*/
    GenericClass1(int quantidade1, string name = "valor")
    {
    	/*Comentário do construtor*/
        quantidade = quantidade1;
        nome = name;
    }

	/*Método set*/
    void setNome(string nome1)
    {
        nome = nome1;
    }

    string getNome()
    {
        return nome;
    }

    static void printUniversal()
    {
    }

    void printUniversal2() const
    {
    }

	/*Destrutor*/
    ~GenericClass1()
    {
    	/*Corpo do destrutor*/
    	//Com comentário simples e de bloco
    }
	/**fora do destrutor**/
};
//Fora da classe